t\here
/*
Requirements 
Complete the steps in the interactive code block. Delete the TODO comment and replace it with your code to declare and initialize five variables according to the requirements. Make sure you use logical variable names that meet the best practices discussed earlier. Remember, you can declare and initialize a variable in one line. If you feel unsure about this, revisit the video 
Introduction to variables and data types
.

Variable 1: Every book has a title, what kind of variable is best suited to store this?

Variable 2: Books are written by people. You want to store the writer's name, what variable will you use?

Variable 3: There are a certain number of pages in a book, and they are all full pages. No book has half a page, right? What type of variable would you use to store this page value?

Variable 4: Books cost money, and you need to keep track of how much. Prices are funny; sometimes, they are just a little less than a whole number, like 19.99. What type of variable would you select to store the price?

Remember to assign values to your variables, and then you can write a print statement to display your book to the world!

Print the line using System.out.println().

Select Run to view the output. 

Explore the output.

*/

public class FavoriteBook {
    public static void main(String args[]) {


	String title = "Back to the future";
        String author = "Elnura & Wojtek";
        int pages = 90;
        double prize = 19.90;

        System.out.println(" Title of the book is: " + title);
        System.out.println(" The book is write by: " + author);
        System.out.println(" The number of pages: " + pages);
        System.out.println(" The book costs: " + prize); 


    }
}


// ðŸ”¹ Replace __ with the correct logical operators (&&, ||, !).

public class LogicalTest {
    public static void main(String[] args) {
        boolean a = true;
        boolean b = false;
        boolean c = true;

        // Fill in the correct logical operators
        System.out.println("Test 1: " + (a && b));
        System.out.println("Test 2: " + (a && c));
        System.out.println("Test 3: " + (b || c));
        System.out.println("Test 4: " + ((a || b) &!c));
    }
}

//test 2 âœ… Hint: One line requires &&, and the other requires ||.

public class LogicalTest1 {
    public static void main(String[] args) {
        boolean x = true;
        boolean y = false;

        System.out.println("Test 1: " + (x && y));
        System.out.println("Test 2: " + (x || y));
    }
}

//tst 3 âœ… Hint: Use ! (NOT) in combination with another operator.
public class LogicalTest2 {
    public static void main(String[] args) {
        boolean a = false;
        boolean b = true;

        System.out.println("Test 1: " + (!a && b));
        System.out.println("Test 2: " + (!b || a));
    }
}
//test 4 Complex: Hint: You need to mix && and || carefully.

public class LogicalTest3 {
    public static void main(String[] args) {
        boolean p = true;
        boolean q = false;
        boolean r = true;

        System.out.println("Test 1: " + ((p || q) && r));
        System.out.println("Test 2: " + (p && (q && r)));
    }
}

// test 5 Nested logical expressions âœ… Hint: One line involves a double negation or parentheses placement.
public class LogicalTest4 {
    public static void main(String[] args) {
        boolean m = false;
        boolean n = true;

        System.out.println("Test 1: " + (!m && n ));
        System.out.println("Test 2: " + (!(m || n )));
    }
}
